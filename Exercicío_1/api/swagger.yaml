---
swagger: "2.0"
info:
  description: "Este é um servidor simples para hospedar informações de uma Livraria\n"
  version: "1.0.0"
  title: "API para Livraria"
  contact:
    name: "Luiz Carlos dos Santos"
    email: "luizcsbh@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/Luiz-Dev/Livraria/1.0.0"
tags:
- name: "book"
  description: "Tudo sobre Livros"
- name: "publisher"
  description: "Dados da Editora"
- name: "category"
  description: "Categoria de livros da Livraria"
- name: "authors"
  description: "Dados do Autor(es) do Livro"
- name: "user"
  description: "Dados dos Usuários"
- name: "order"
  description: "Dados dos Pedidos"
- name: "cart"
  description: "Carrinhos de Compras"
- name: "payment"
  description: "Pagamento das compras"   
schemes:
- "https"
- "http"
paths:
  /books:
    post:
      tags:
      - "books"
      summary: "Adicionar um livro na livraria"
      description: "Adicionar um livro sistema"
      operationId: "AddLivros"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "ItemInventario"
        description: "Adicionando item"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        201:
          description: "Item adicionado"
        400:
          description: "entrada inválida, objeto inválido"
        405:
          description: "Entrada inválida"
        409:
          description: "já existe um item"
      x-swagger-router-controller: "Books"
    put:
      tags:
      - "books"
      summary: "Atualização de um livro existente"
      operationId: "updateBook"
      consumes:
      - "aplication/json"
      - "application/xml"
      produces:
      - "aplication/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "Corpo"
        description: "Objeto livros precisa ser adicionado na Livraria"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        400:
          description: "ID inválido fornecido"
        404:
          description: "Livro não encontrado"
        405:
          description: "Exceção de validação"
      x-swagger-router-controller: "Books"
  /books/{isbn}:
    get:
      tags:
      - "books"
      summary: "Encontrar um livro pelo ISBN"
      description: "Retorna um único livro"
      operationId: "getBookByIsbn"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "isbn"
        in: "path"
        description: "Informa ISBN do livro"
        required: true
        type: "string"
      responses:
        200:
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "ISBN inválido fornecido"
        404:
          description: "Livro não encontrado"
      x-swagger-router-controller: "Books"
    post:
      tags:
      - "books"
      summary: "Atualiza um livro da Livraria com os dados do formulário"
      operationId: "updateBookWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "isbn"
        in: "path"
        description: "ISBN do Livro que precisa ser atualizado"
        required: true
        type: "string"
        format: "isbn-10"
      - name: "Título"
        in: "formData"
        description: "Atualização do Título do Livro"
        required: false
        type: "string"
      - name: "idioma"
        in: "formData"
        description: "Atualização do Idioma do Livro"
        required: false
        type: "string"
      responses:
        405:
          description: "Entrada inválida"
      x-swagger-router-controller: "Books"
    delete:
      tags:
      - "books"
      summary: "Apagar um Livro"
      operationId: "deleteBook"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "chave"
        in: "header"
        required: false
        type: "string"
      - name: "isbn"
        in: "path"
        description: "Livro apagado"
        required: true
        type: "string"
      responses:
        400:
          description: "ISBN"
        404:
          description: "Livro não encontrado"
      x-swagger-router-controller: "Books"
  /cart{cartid}:
    get:
      tags:
      - "cart"
      summary: "Encontrar o carrinho de Compras"
      description: "Retorna um um carrinho de compras"
      operationId: "getCartId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "cartid"
        in: "path"
        description: "Informa id do Carrinho"
        required: true
        type: "string"
      responses:
        200:
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: "ID inválido fornecido"
        404:
          description: "Carrinho não encontrado"
      x-swagger-router-controller: "Cart"
    post:
      tags:
      - "cart"
      summary: "Atualiza um carrinho de compras com os dados do formulário"
      operationId: "updateCartWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "cartid"
        in: "path"
        description: "ID do Livro que precisa ser atualizado"
        required: true
        type: "string"
        format: "isbn-10"
      - name: "orderid"
        in: "formData"
        description: "Atualiza a encomenda"
        required: true
        type: "integer"
      - name: "Quantidade"
        in: "formData"
        description: "Atualização da Quantidade"
        required: false
        type: "integer"
      - name: "Subtotal"
        in: "formData"
        description: "Atualização do subtotal"
        required: false
        type: "string"
      - name: "Pagamento"
        in: "formData"
        description: "Atualização do Pagamento"
        required: false
        type: "string"  
      responses:
        405:
          description: "Entrada inválida"
      x-swagger-router-controller: "Cart"
    delete:
      tags:
      - cart
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors
      operationId: deleteCarte
      produces:
      - application/json
      - application/xml
      parameters:
      - name: cartid
        in: path
        description: ID of the cart that needs to be deleted
        required: true
        type: integer
        minimum: 1.0
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Order not found 
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing. 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
  /store/order:
    post:
      tags:
      - store
      summary: Faça um pedido para um livro
      operationId: placeOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: encomenda para comprar um Livro
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: Operação bem sucedida
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Pedido Inválido
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Encontrar ordem de compra por ID
      description: Para uma resposta válida, tente IDs inteiros com valor >= 1 and <= 10.\
        \ Outros valores gerarão exceções
      operationId: getOrderById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID do Livro que precisa ser buscado
        required: true
        type: integer
        maximum: 10.0
        minimum: 1.0
        format: int64
      responses:
        200:
          description: Operação bem sucedida
          schema:
            $ref: '#/definitions/Order'
        400:
          description: ID inválido fornecido
        404:
          description: Encomenda não encontrada
    delete:
      tags:
      - store
      summary: Excluir pedido de compra por ID
      description: Para uma resposta válida, tente IDs inteiros com valor inteiro positivo.\
        \ Valores negativos ou não inteiros geram erros de API
      operationId: deleteCart
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID do pedido que precisa ser excluído
        required: true
        type: integer
        minimum: 1.0
        format: int64
      responses:
        400:
          description: ID inválido fornecido
        404:
          description: Encomenda não encontrada
  
definitions:
  Book:
    type: object
    required:
    - isbn
    properties:
      isbn:
        type: string
        format: int32
        example: "8576089343"
      titulo:
        type: string
        example: "Introdução a ciência de dados"
      idioma:
        type: string
        example: "Português"
      datapublicacao:
        type: string
        format: isbn-10
        example: "20-06-2016"
      numpaginas:
        type: integer
        format: int32
        example: "320"
      price:
        type: string
        format: int32
        example: "R$ 59,90"
      editora:
        $ref: "#/definitions/Publisher"
      categoria:
        $ref: "#/definitions/Category"
    example:
      numpaginas: 320
      isbn: "8576089343"
      título: "Introdução a ciência de dados"
      idioma: "Português"
      datapublicacao: "20-06-2016"
      editora:
        editoraid: 0
        name: "Alta Books"
        authors:
          nome: "Fenando Amaral"
          authorid: 6
      categoria:
        categoryid: 1
        categorynome: "Voltas Aulas"
  Category:
    type: object
    properties:
      categoryid:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Categoria
  Publisher:
    type: object
    required:
    - publisherid
    properties:
      publisherid:
        type: integer
        format: int32
      name:
        type: string
        example: "Alta Books"
      authors:
        $ref: "#/definitions/Authors"
    example:
      editoraid: 0
      name: "Alta Books"
      authors:
        nome: "Fenando Amaral"
        authorid: 6
  Authors:
    type: object
    required:
    - authorid
    properties:
      authorid:
        type: integer
        format: int32
      nome:
        type: string
        example: "Fenando Amaral"
    example:
      nome: "Fenando Amaral"
      authorid: 6
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
    example:
      userdi: 5
      nome: "José da Silva"
      genero: "Masculino"
      endereco: "Avenida  Washington Luiz, 430  São Bernardo"
      cidadde: "Belo Horizonte"
      estado: "Minas Gerais"
      cep: "31270705" 
  Order:
    type: object
    required:
    - userid
    - isbn
    properties:
      orderid:
        type: integer
        format: int64
      isbn:
        type: string
        format: isbn-10
      quantitade:
        type: integer
        format: int32
      dataEntrega:
        type: string
        format: date-time
      status:
        type: string
        description: Status da Encomenda
        enum:
        - colocar
        - aprovado
        - entregue
      complete:
        type: boolean
        default: false
    xml:
      name: Encomenda
  Comment:
    type: object
    required:
    - isbn
    - userid
    properties:
      descricao:
        type: string
      isbn:
        $ref: "#/definitions/Book"
      user:
        $ref: "#/definitions/User"
    xml:
      name: Comentario
  Cart:
    type: object
    required:
    - userid
    - isbn
    - orderid
    - pagamentoid
    properties:
      cartid:
        type: integer
        format: int32
      quantidade:
        type: integer
        format: int32
      subtotal:
        type: string
      user:
        $ref: "#/definitions/User"
      isbn:
        $ref: "#/definitions/Book"
      orderid:
        $ref: "#/definitions/Order"
      pagamento:
        $ref: "#/definitions/Payment"
    xml:
      name: Cart
  Payment:
    type: object
    properties:
      pagamentoid:
        type: integer
        format: int32
      tipopagamento:
        type: string
      valor:
        type: string
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"